import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../../app/store'
import { historyAsync } from './historyApi';

interface HistoryrProps {
  userId: string;
  movie1: string;
  movie2: string;
}

export enum Status {
  Idle = "idle",
  Loading = "loading",
  Failed = "failed"
}

export interface HistoryState {
  value: HistoryrProps | null;
  status: Status;
}

const initialState: HistoryState = {
  value: null,
  status: Status.Idle,
};

export const historySlice = createSlice({
  name: 'historySlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setHistory: (state, action: PayloadAction<HistoryrProps>) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(historyAsync.pending, (state) => {
        state.status = Status.Loading;
      })
      .addCase(historyAsync.fulfilled, (state, action) => {
        state.status = Status.Idle;
        state.value = action.payload;
        console.log(action.payload, "1");
        console.log(state.value, "2");

      })
      .addCase(historyAsync.rejected, (state) => {
        state.status = Status.Failed;
      });
  },
});

export const { setHistory } = historySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectHistory = (state: RootState) => state.history.value;
export const selectStatusHistory = (state: RootState) => state.history.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default historySlice.reducer;
