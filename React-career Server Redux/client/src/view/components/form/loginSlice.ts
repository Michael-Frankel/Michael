import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../../app/store'
import { loginAsync } from './loginUserApi';

interface LoginProps {
  name: string;
  email: string;
  password: string;
  ok: boolean;
}

export enum LoginStatus {
  Idle = "idle",
  Loading = "loading",
  Failed = "failed"
}

export interface LoginState {
  value: LoginProps | null;
  status: LoginStatus;
}

const initialState: LoginState = {
  value: null,
  status: LoginStatus.Idle,
};

export const loginSlice = createSlice({
  name: 'loginSlice',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setLogin: (state, action: PayloadAction<LoginProps>) => {
      state.value = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginAsync.pending, (state) => {
        state.status = LoginStatus.Loading;
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = LoginStatus.Idle;
        if (action.payload.ok) {
          state.value = { ...action.payload.result, ok: true }
        } else {
          state.value = { ...action.payload, ok: false };
        }


      })
      .addCase(loginAsync.rejected, (state) => {
        state.status = LoginStatus.Failed;
      });
  },
});

//export const { setLogin } = loginAsync.actions;--------------------------------------<<<<<------------->>>>>>>

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectLogin = (state: RootState) => state.login.value;
export const selectStatusLogin = (state: RootState) => state.login.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default loginSlice.reducer;
